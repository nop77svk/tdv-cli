@namespace NoP77svk.TibcoDV.CLI
@accessibility internal
@classname PierresTibcoSqlParser
@ignorecase true
@start start
@trace true
@using NoP77svk.TibcoDV.API
@members
{
	#nullable disable
}

start<object>
	= _ result:statement _ EOF
	{ result }

statement<object>
	= clientSideStatement
	/ serverSideStatement

serverSideStatement<AST.IAsyncExecutable>
	= grantStatement
	/ createResourceStatement
	/ publishStatement
	/ dropResourceStatement
	/ purgeResourceStatement
	/ assignStatement
	/ unassignStatement
	/ describeStatement
	/ introspectStatement
	/ #ERROR{ "Unrecognized server-side command" }

clientSideStatement<AST.ISyncExecutable> = "#" v:clientSideStatementWhat { v }

clientSideStatementWhat<AST.ISyncExecutable>
	= clientSidePrompt
	/ clientSideTimer
	/ clientSideConnectionTimeout
	/ clientSideSet
	/ #ERROR{ "Unrecognized client-side command" }

// ------------------------------------------------------------------------------------------------

clientSideSet<AST.ISyncExecutable> = "set" __ var:resourceIdentifier _ "=" _ value:clientSideSetValue
{
	new AST.Client.CommandSet(var, value)
}

clientSideSetValue<object>
	= v:numericLiteral { v }
	/ v:stringLiteral { v }
	/ v:booleanLiteral { v }
	/ v:timeLiteral { v }
	/ #ERROR{ "Unrecognized value" }

// 2do! pragmaRequestTimeout<AST.TimeSpan> = "timeout" __ v:timeLiteral { v }

// ------------------------------------------------------------------------------------------------

clientSideConnectionTimeout<AST.ISyncExecutable> = "timeout" __ v:timeLiteral
{
	new AST.Client.CommandConnectionTimeout(v)
}

// ------------------------------------------------------------------------------------------------

clientSideTimer<AST.ISyncExecutable> = "timer" __ v:booleanLiteral
{
	new AST.Client.CommandTimer(v)
}

// ------------------------------------------------------------------------------------------------

clientSidePrompt<AST.ISyncExecutable> = "prompt" __ v:stringLiteral
{
	new AST.Client.CommandPrompt(v)
}

// ------------------------------------------------------------------------------------------------

createResourceStatement<AST.IAsyncExecutable> = "create" __
	soifnx:statementOptionIfNotExistsWithWhitespace
	ddl:( createViewDDL / createFolderDDL / createSchemaDDL / #ERROR{ "Unrecognized resource type to be created" } )
{
	new AST.Server.CommandCreateResource(soifnx, ddl)
}

createViewDDL<object> = ("view" / "dataview" / "data" __ "view") __ res:resourcePath __
	"as" __
	q:sqlQuery
{
	new AST.Server.ViewDDL()
	{
		ResourcePath = res,
		ViewQuery = q
	}
}

createFolderDDL<object> = "folder" __ res:resourcePath
{
	new AST.Server.FolderDDL(res)
}

createSchemaDDL<object> = "schema" __ res:resourcePath
{
	new AST.Server.SchemaDDL(res)
}

// ------------------------------------------------------------------------------------------------

publishStatement<AST.IAsyncExecutable> = "pub" "lish"? __
	ifNotExists:statementOptionIfNotExistsWithWhitespace
	source:resourcePath __
	"to" __ target:resourcePath
	flattenString:(
		( __ "flat" "ten"? __ ("folder" __)? "hierarchy" __ "with" __ v:stringLiteral ) {v}
		/
		{null}
	)
{
	new AST.Server.CommandPublish(source, target, flattenString, ifNotExists)
}

// ------------------------------------------------------------------------------------------------

// 2do! introduce "listOfDroppableResourceSpecifiers", "droppableResourceType" PEG rules

dropResourceStatement<AST.IAsyncExecutable> = "drop" __
	soifx:statementOptionIfExistsWithWhitespace
	res:listOfFullResourceSpecifiers
{
	new AST.Server.CommandDropResource(soifx, res, true)
}

// ------------------------------------------------------------------------------------------------

purgeResourceStatement<AST.IAsyncExecutable> = "purge" __
	soifx:statementOptionIfExistsWithWhitespace
	res:listOfFullResourceSpecifiers
{
	new AST.Server.CommandDropResource(soifx, res, false)
}

// ------------------------------------------------------------------------------------------------

grantStatement<AST.IAsyncExecutable> = "grant" __
	modusOperandi:grantOptionAppendOrSetWithWhitespace
	isRec:statementOptionRecursiveWithWhitespace
	priv:listOfResourcePrivileges __
	("on" / #ERROR{"ON keyword expected"}) __ res:listOfFullResourceSpecifiers __
	("to" / #ERROR{"TO keyword expected"}) __ who:liberalListOfPrincipals
	prop:grantPropagationOptionOptional
{
	new AST.Server.CommandGrant(isRec, modusOperandi, priv, res, who, prop)
}

grantOptionAppendOrSetWithWhitespace<NoP77svk.TibcoDV.API.WSDL.Admin.updatePrivilegesMode>
	= v:grantOptionAppendOrSet __ { v }
	/ { NoP77svk.TibcoDV.API.WSDL.Admin.updatePrivilegesMode.OVERWRITE_APPEND }

grantOptionAppendOrSet<NoP77svk.TibcoDV.API.WSDL.Admin.updatePrivilegesMode>
	= "append" { NoP77svk.TibcoDV.API.WSDL.Admin.updatePrivilegesMode.OVERWRITE_APPEND }
	/ "set" { NoP77svk.TibcoDV.API.WSDL.Admin.updatePrivilegesMode.SET_EXACTLY }

listOfResourcePrivileges<IList<TdvPrivilegeEnum>>
	= resourcePrivilege<1,,_ "," _>
	/ #ERROR{ "Cannot parse the list of privileges" }

resourcePrivilege<TdvPrivilegeEnum>
	= "read" { TdvPrivilegeEnum.Read }
	/ "write" { TdvPrivilegeEnum.Write }
	/ "select" { TdvPrivilegeEnum.Select }
	/ "insert" { TdvPrivilegeEnum.Insert }
	/ "update" { TdvPrivilegeEnum.Update }
	/ "delete" { TdvPrivilegeEnum.Delete }
	/ "execute" { TdvPrivilegeEnum.Execute }
	/ "grant" { TdvPrivilegeEnum.Grant }
	/ #ERROR{ "Unrecognized privilege" }

grantPropagationOptionOptional<AST.Server.GrantPropagationDirections>
	= ( __ prop:grantPropagationOption ) { prop }
	/ "" { new AST.Server.GrantPropagationDirections(false, false) }

grantPropagationOption<AST.Server.GrantPropagationDirections> = "propagate" __ prop:grantPropagationDirections { prop }

grantPropagationDirections<AST.Server.GrantPropagationDirections>
	= ( "both" __ "directions" ) { new AST.Server.GrantPropagationDirections(true, true) }
	/ ( ("both" __)? grantPropagationDirectionToConsumers __ "and" __ grantPropagationDirectionToProducers ) { new AST.Server.GrantPropagationDirections(true, true) }
	/ ( ("both" __)? grantPropagationDirectionToProducers __ "and" __ grantPropagationDirectionToConsumers ) { new AST.Server.GrantPropagationDirections(true, true) }
	/ grantPropagationDirectionToProducers { new AST.Server.GrantPropagationDirections(false, true) }
	/ grantPropagationDirectionToConsumers { new AST.Server.GrantPropagationDirections(true, false) }
	/ #ERROR{ "Unrecognized way of privilege propagation" }

grantPropagationDirectionToConsumers = ( "down" "stream"? ) / ( "to" __ "consumers" )

grantPropagationDirectionToProducers = ( "up" "stream"? ) / ( "to" __ "producers" )

// ------------------------------------------------------------------------------------------------

assignStatement<AST.IAsyncExecutable> = "assign" __
	what:policySpecifier __
	("to" / #ERROR{ "TO keyword expected" }) __
	res:listOfFullResourceSpecifiers
{
	new AST.Server.CommandAssign(NoP77svk.TibcoDV.API.WSDL.Admin.rbsAssignmentOperationType.ASSIGN, what, res)
}

unassignStatement<AST.IAsyncExecutable> = "unassign" __
	what:policySpecifier __
	("from" / #ERROR{ "FROM keyword expected" }) __
	res:listOfFullResourceSpecifiers
{
	new AST.Server.CommandAssign(NoP77svk.TibcoDV.API.WSDL.Admin.rbsAssignmentOperationType.REMOVE, what, res)
}

policySpecifier<AST.Server.FilterPolicy>
	= v:rbsFilterPolicySpecifier { v }
	/ v:cbsFilterPolicySpecifier { v }
	/ #ERROR{"Unknown filter policy type"}

rbsFilterPolicySpecifier<AST.Server.FilterPolicy> = ("rbs" / "rls") __ ( ("pol" "icy"?) / #ERROR{ "Missing \"policy\" keyword"} ) __
	policy:resourcePath
{
	new AST.Server.RbsFilterPolicy(policy)
}

cbsFilterPolicySpecifier<AST.Server.FilterPolicy> = ("cbs" / "cls") __ ( ("pol" "icy"?) / #ERROR{ "Expected \"policy\" keyword"} ) __
	policy:resourcePath
{
	new AST.Server.CbsFilterPolicy(policy)
}

// ------------------------------------------------------------------------------------------------

describeStatement<AST.IAsyncExecutable>
	= describeCommand __ describeChoice __ v:listOfPartialResourceSpecifiers
{
	new AST.Server.CommandDescribe(v)
}

describeCommand = "desc" ("r" ("ibe")?)?

describeChoice
	= "resource" "s"?
	/ "introspected"
	/ "introspectable"
	/ #ERROR{ "Unrecognized choice of describing" }

// ------------------------------------------------------------------------------------------------

introspectStatement<AST.IAsyncExecutable> = "introspect" __ dslist:introspectTargetDataSourceList
{
	new AST.Server.CommandIntrospect(dslist)
}

introspectTargetDataSourceList<IList<AST.Server.IntrospectTargetDataSource>> = v:introspectTargetDataSource<1,,_ "," _> { v }

introspectTargetDataSource<AST.Server.IntrospectTargetDataSource> =
	"data" ( "_" / _ ) "source" __ name:resourcePath clist:introspectTargetDataSourceOptionalCatalogList
{
	new AST.Server.IntrospectTargetDataSource(name, clist)
}

introspectTargetDataSourceOptionalCatalogList<IList<AST.Server.IntrospectTargetCatalog>> =
	( _ "(" _ x:introspectTargetCatalogList _ ")" _ ) { x }
	/
	"" { new List<AST.Server.IntrospectTargetCatalog>() }

introspectTargetCatalogList<IList<AST.Server.IntrospectTargetCatalog>> = v:introspectTargetCatalog<1,,_ "," _> { v }

introspectTargetCatalog<AST.Server.IntrospectTargetCatalog> =
	"cat" "alog"? __ name:resourceIdentifier slist:introspectTargetCatalogOptionalSchemaList
{
	new AST.Server.IntrospectTargetCatalog(name, slist)
}

introspectTargetCatalogOptionalSchemaList<IList<AST.Server.IntrospectTargetSchema>> =
	( _ "(" _ x:introspectTargetSchemaList _ ")" _ ) { x }
	/
	"" { new List<AST.Server.IntrospectTargetSchema>() }

introspectTargetSchemaList<IList<AST.Server.IntrospectTargetSchema>> = v:introspectTargetSchema<1,,_ "," _> { v }

introspectTargetSchema<AST.Server.IntrospectTargetSchema> =
	"sch" "ema"? __ name:resourceIdentifier tlist:introspectTargetSchemaOptionalTableList
{
	new AST.Server.IntrospectTargetSchema(name, tlist)
}

introspectTargetSchemaOptionalTableList<IList<AST.Server.IntrospectTargetTable>> =
	( _ "(" _ x:introspectTargetTableList _ ")" _ ) { x }
	/
	"" { new List<AST.Server.IntrospectTargetTable>() }

introspectTargetTableList<IList<AST.Server.IntrospectTargetTable>> = v:introspectTargetTable<1,,_ "," _> { v }

introspectTargetTable<AST.Server.IntrospectTargetTable> = tabOp:setElementOperation __ tabSpec:introspectTargetTableSpecifier
{
	new AST.Server.IntrospectTargetTable(tabOp, tabSpec)
}

introspectTargetTableSpecifier<AST.Infra.MatchBy>
	= a:matchIdentifierByRegExp { a }
	/ x:matchIdentifierExactly { x }

// ================================================================================================
// general language elements
// ================================================================================================

// ------------------------------------------------------------------------------------------------
// general language elements - resource

listOfFullResourceSpecifiers<IList<AST.Server.ResourceSpecifier>>
	= v:fullResourceSpecifier<1,,_ "," _>
	{ v }

fullResourceSpecifier<AST.Server.ResourceSpecifier>
	= typ:resourceTypeWS __ res:resourcePath { new AST.Server.ResourceSpecifier(typ, res) }
	/ #ERROR{ "Invalid resource specifier" }

listOfPartialResourceSpecifiers<IList<AST.Server.ResourceSpecifier>>
	= v:partialResourceSpecifier<1,,_ "," _>
	{ v }

partialResourceSpecifier<AST.Server.ResourceSpecifier>
	= typ:resourceTypeWithWhitespace res:resourcePath { new AST.Server.ResourceSpecifier(typ, res) }

resourceTypeWithWhitespace<NoP77svk.TibcoDV.API.WSDL.Admin.resourceType>
	= v:resourceTypeWS __ { v }
	/ { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.NONE }

resourceTypeWS<NoP77svk.TibcoDV.API.WSDL.Admin.resourceType>
	= "adapter" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.ADAPTER }
	/ "container" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.CONTAINER }
	/ "data" ("_" / _) "source" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.DATA_SOURCE }
	/ "def" "inition"? ("_" / _) "set" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.DEFINITION_SET }
	/ "extension" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.EXTENSION }
	/ "link" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.LINK }
	/ "model" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.MODEL }
	/ "policy" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.POLICY }
	/ "procedure" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.PROCEDURE }
	/ "relationship" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.RELATIONSHIP }
	/ "table" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.TABLE }
	/ "tree" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.TREE }
	/ "trigger" { NoP77svk.TibcoDV.API.WSDL.Admin.resourceType.TRIGGER }

// listOfResources<IList<string>>
//	= v:resourcePath<1,,_ "," _>
//	{ v }

resourcePath<string>
	= thePath:("" (!"/*" "/" resourceIdentifier)+) { thePath }
	/ #ERROR{ "Invalid resource path" }

resourceIdentifier<string>
	= v:([a-z][a-z0-9_$]*) { v }
	/ #ERROR{ "Invalid resource identifier" }

// ------------------------------------------------------------------------------------------------
// general language elements - principal

liberalListOfPrincipals<IList<AST.Server.Principal>> = v:liberalPrincipal<1,,_ "," _> { v }

liberalPrincipal<AST.Server.Principal>
	= v:simplePrincipalIdentifier { v }
	/ v:matchingPrincipalIdentifier { v }
	/ #ERROR{ "Incorrect principal specifier" }

/*
conservativeListOfPrincipals<IList<AST.Server.Principal>>
	= v:simplePrincipalIdentifier<1,,_ "," _>
	{ v }
*/

simplePrincipalIdentifier<AST.Server.Principal> = typ:principalType __ name:resourceIdentifier "@" dom:resourceIdentifier { new AST.Server.Principal(typ, dom, new AST.Infra.MatchExactly(name)) }

matchingPrincipalIdentifier<AST.Server.Principal> = dom:resourceIdentifier __ typ:principalType __ op:principalIdentifierMatch { new AST.Server.Principal(typ, dom, op) }

principalIdentifierMatch<AST.Infra.MatchBy>
	= ident:matchIdentifierByRegExp { ident }
	/ ident:matchIdentifierExactly { ident }
	/ #ERROR{ "Unrecognized principal identifier matching expression"}

principalType<NoP77svk.TibcoDV.API.WSDL.Admin.userNameType>
	= "user" { NoP77svk.TibcoDV.API.WSDL.Admin.userNameType.USER }
	/ "group" { NoP77svk.TibcoDV.API.WSDL.Admin.userNameType.GROUP }

// ------------------------------------------------------------------------------------------------
// general language elements - matching

matchIdentifierByRegExp<AST.Infra.MatchBy> = ("rlike" / "rxlike" / "regexlike" / "regexplike" / "matching") __ value:regexp { new AST.Infra.MatchByRegExp(value) }

matchIdentifierExactly<AST.Infra.MatchBy> = (("equal" ( __ "to")?) / "exactly")? __ value:resourceIdentifier { new AST.Infra.MatchExactly(value) }

// ------------------------------------------------------------------------------------------------
// general language elements - literals

numericLiteral<double> = v:( "" [+-]? ( numericLiteralIntegerAndFraction / numericLiteralFractionOnly ) ([eE] [+-]? numericLiteralPositiveInteger) ) { double.Parse(v) }
numericLiteralPositiveInteger<string> = v:("" [0-9]+) { v }
numericLiteralIntegerAndFraction<string> = v:( "" numericLiteralPositiveInteger ( "." numericLiteralPositiveInteger )? ) { v }
numericLiteralFractionOnly<string> = v:( "." numericLiteralPositiveInteger ) { v }

stringLiteral<string>
	= '"' v:("" [^"]*) '"' { v }
	/ "'" v:("" [^']*) "'" { v }
	/ #ERROR{ "String literal value expected" }

regexp<string> = v:("\/" ("\\\/" / [^/])* "\/" [a-zA-Z]*) { v }

booleanLiteral<bool>
	= "on" { true }
	/ "off" { false }
	/ "true" { true }
	/ "false" { false }
	/ "yes" { true }
	/ "no" { false }
	/ "1" { true }
	/ "0" { false }
	/ #ERROR{ "Boolean literal value expected" }

timeLiteral<AST.Infra.TimeSpan> = value:numericLiteral __ unit:timeUnit { new AST.Infra.TimeSpan(value, unit) }

timeUnit<AST.Infra.TimeUnitEnum>
	= ("ms" / ("millisec" ("ond" "s"?)?)) { AST.Infra.TimeUnitEnum.Millisecond }
	/ "s" ("ec" ("ond" "s"?)?)? { AST.Infra.TimeUnitEnum.Second }
	/ "min" ("ute" "s"?)? { AST.Infra.TimeUnitEnum.Minute }
	/ "h" ("our" "s"?)? { AST.Infra.TimeUnitEnum.Hour }
	/ "d" ("ay" "s"?)? { AST.Infra.TimeUnitEnum.Day }
	/ "w" "eek"? { AST.Infra.TimeUnitEnum.Week }
	/ #ERROR{ "Unrecognized time unit" }

// ------------------------------------------------------------------------------------------------
// general language elements - common statement options

statementOptionRecursive = "recursive"

statementOptionRecursiveWithWhitespace<bool>
	= statementOptionRecursive __ { true }
	/ { false }

statementOptionIfExists = "if" __ ( "exists" / #ERROR{ "\"exists\" expected" } )

statementOptionIfExistsWithWhitespace<bool>
	= statementOptionIfExists __ { true }
	/ { false }

statementOptionIfNotExists = "if" __ ( "not" __ "exists" / #ERROR{ "\"not exists\" expected" } )

statementOptionIfNotExistsWithWhitespace<bool>
	= statementOptionIfNotExists __ { true }
	/ { false }

setElementOperation<AST.Infra.SetElementOperation>
	= ( "in" ("c" "lude"?)? ) { AST.Infra.SetElementOperation.Include }
	/ ( "ex" ("c" "lude"?)? ) { AST.Infra.SetElementOperation.Exclude }
	/ #ERROR{ "\"include\"/\"exclude\" keyword expected" }

// ------------------------------------------------------------------------------------------------
// general language elements - others

sqlQuery<string> = v:("" .*) { v.TrimEnd() }

// ------------------------------------------------------------------------------------------------
// general language elements - whitespace and insignificant elements

// _ = whiteSpaceCharacter*
_ -lexical = ( whiteSpaceCharacter* ( comment whiteSpaceCharacter* )* ) / whiteSpaceCharacter* { null }
// __ = whiteSpaceCharacter+
__ -lexical = ( whiteSpaceCharacter* ( comment whiteSpaceCharacter* )* ) / whiteSpaceCharacter+ { null }

comment = singleLineComment / multiLineComment
singleLineComment = "--" [^\r\n]* EOLN
multiLineComment = "/*" (!"*/" .)* "*/"

whiteSpaceCharacter = [ \t\v\f\u00A0\uFEFF\u1680\u180E\u2000-\u200A\u202F\u205F\u3000] / EOLN

EOLN = "\r\n" / "\n" / "\r" / "\u2028" / "\u2029"

EOF = !. / c:("" .*) #ERROR{ "Unexpected trailing \"" + c + "\"" }
